#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <uart0.h>
#include <uart1.h>
#include "clock.h"
#include "tm4c123gh6pm.h"
#include "rgb_led.h"
#include "adc0.h"
//#include "driverlib/eeprom.h"
//

#define UART_TX_MASK 2
#define UART_RX_MASK 1
#define DEN  (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 6*4))) //PA6
#define GREEN_BLED  (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 7*4)))// PA7
#define RED_BLED  (*((volatile uint32_t *)(0x42000000 + (0x400053FC-0x40000000)*32 + 5*4))) //pb5
#define DEN_MASK 64    // PORT A PIN 6
#define RED_BLED_MASK 32 // PORT B PIN 5
#define GREEN_BLED_MASK 128  //PORT A PIN 7
#define MAX_CHARS 80


// PortE masks
#define AIN3_MASK 1







#define MAX_FIELDS 10
#define MAX_DATA 10
typedef struct _USER_DATA
{
char buffer[MAX_CHARS+1];
uint8_t fieldCount;
uint8_t fieldPosition[5];
char fieldType[5];
}USER_DATA;


// for TX
typedef struct _Tx485msg
{
uint8_t dstAdd;
uint8_t srcAdd;
uint8_t cmd;
uint8_t channel;
uint8_t size;
uint8_t Txdata[MAX_DATA];
bool ack;
uint8_t seqId;
uint8_t checksum;
bool sendable;
bool timeToTx;
uint8_t count;
}Tx485msg;

uint8_t RxdstAdd;
uint8_t RxsrcAdd;
uint8_t Rxcmd;
uint8_t Rxchannel;
uint8_t Rxsize;
uint8_t Rxdata[MAX_DATA];
uint8_t RxseqId;
uint8_t Rxchecksum; //  note: calculated when rs 485 called
uint8_t calculate;

// Initialize Hardware
void initHw()
{
    // Initialize system clock to 40 MHz
    initSystemClockTo40Mhz();

    // Enable clocks
    SYSCTL_RCGCTIMER_R |= SYSCTL_RCGCTIMER_R1;  //timer1
    SYSCTL_RCGCGPIO_R = SYSCTL_RCGCGPIO_R1;
    SYSCTL_RCGCGPIO_R = SYSCTL_RCGCGPIO_R4; // port E for ADC

    _delay_cycles(3);

 
}

void getsUart0(USER_DATA*data)
{

    uint8_t count =0;
 char c;
 c= getcUart0();
    while((count>=0 && count<=80))
     {
        c= getcUart0();
        if (c==8 || c==127)   // backspace
            {
              if (c>0)
               {
                  count=count - 1;
                  putcUart0(c);
               }
              else
              {
                 getcUart0();
                 putcUart0(c);
              }
            }
        else if (c>=32)
            {
                data->buffer[count]=c;
                count =count+1;
                putcUart0(c);
            }
        else if (c==10 || c==13 || count== MAX_CHARS) // for enter
            {
                data->buffer[count]='\0';

                break;
            }



     }

}
void  parseFields(USER_DATA*data)
{
    uint8_t i=0,j=0;
     char c;
     data->fieldCount = 0;

         uint8_t holder=2;
         for( i=0,j=0;data->buffer[i]!='\0';i++)
             {c=data->buffer[i];
                 if(c>=48 && c<=57)
                 {
                     if(holder!=0)
                     {
                         data->fieldType[j]='n';
                         data->fieldPosition[j]=i;
                         j++;
                         data->fieldCount++;

                         holder=0;
                     }
                     else
                     {
                         continue;
                     }

                 }
                 else if(((c>=65 && c<=90)||(c>=97 && c<=122)) )
                 {
                     if (holder!=1)
                     {  data->fieldType[j]='a';
                         data->fieldPosition[j]=i;
                         j++;
                         data->fieldCount++;

                         holder=1;

                     }
                     else
                     {
                         continue;
                     }
                 }
                 else
                 {
                     //data->fieldType[j]='\0';

                     data->buffer[i]='\0';

                     holder=2;
                 }
             }


}
// bool comd RETURNS TRUE OR FALLS VALUE AFTER CHECKING CONDTION

bool isCommand(USER_DATA* data, const char strCommand[], uint8_t minArguments)
{uint8_t p,s;
        if( data->fieldCount > minArguments )
        {
            for(p=0;strCommand[p]!='\0';p++)          

              {
                  if(data->buffer[p]==strCommand[p])

                  {
                    // putcUart0(&data->buffer[p]);
                      continue;

                  }
                  else
                  {
                     return false;
                     break;
                  }

              }
            return true;

          }
          else
          {
             return false;
          }
}


// get filed data after checking set
int32_t getFieldInteger(USER_DATA* data, uint8_t fieldNumber)
    {
          if(data->fieldType[fieldNumber]=='n')
          {
             char* st=&data->buffer[data->fieldPosition[fieldNumber]];
             int i=0;
             int count=0;
             for( i=0; st[i]!='\0';i++)
              {
//                 st[i]= count;
                 count=count*10 +st[i] -'0';

              }

             return count;
          }
          else
              {
                  return 0 ;
              }

    }
// getting on or off
char* getFieldString(USER_DATA* data, uint8_t fieldNumber)
{
    if(data->fieldType[fieldNumber]=='a')
    {
        char* aa=&data->buffer[data->fieldPosition[fieldNumber]];

      return aa; //(char*)data->buffer[data->fieldPosition[fieldNumber]];
    }
    else
     {
         return '\0' ;
     }

}
// STEP 2
Tx485msg Tx485Array[MAX_FIELDS];

int p=0;
bool ACK =1;  // gloable ack
bool cs=0;
bool alert=0;
int MsgNumber=0;
int myaddress;

// rs485 sending function  step 2
void sendRs485(uint8_t DstAdd,uint8_t Cmd,uint8_t Channel,uint8_t Size,uint8_t TxData[],bool Ack )
{ for(p=0;p<=MAX_FIELDS;p++)
  {
     if(Tx485Array[p].sendable==0 )
      {
         //record data
         Tx485Array[p].srcAdd=myaddress;
         Tx485Array[p].dstAdd=DstAdd;
         if(Ack==1)
         {
             Tx485Array[p].cmd=Cmd+0x80;
         }
         else
         {
             Tx485Array[p].cmd=Cmd;
         }
         Tx485Array[p].channel=Channel;
         Tx485Array[p].size=Size;       // how to calculate size
         //Tx485Array[p].count=Tx485Array[p].count;    //which check the number of transmission  done
         int n;
         for(n=0;n<Tx485Array[p].size;n++)
         {
             Tx485Array[p].Txdata[n]=TxData[n];
         }
             // value is a array

         Tx485Array[p].seqId =MsgNumber;//=Tx485Array[p].seqId +1;

         Tx485Array[p].checksum= ~(DstAdd+1+MsgNumber+Cmd+Ack+Channel+Size);
                 MsgNumber++;
         Tx485Array[p].sendable=1;


         // do at last
         if(UART_FR_TXFE & UART1_FR_R )
         {
             sendRs485byte();
         }


         break;
      }


    }





}

// step 3 is uart1

// step 4
char string[100];   // for printing data step 8
int rxphase=0;
int msgInprogress=-1; // invalid
int msgPhase;
int w=0;
float tx_time_out=-1;
float Rx_time_out=-1;
bool busy =1;
//Rx485msg Rx485Array[MAX_FIELDS];
void uart1Isr()    // tx case
{
//UART1_IM_R=UART_IM_TXIM;
//NVIC_ENO_R&=(1<<(INT-UART1-16));


 if (!(UART1_FR_R & UART_FR_RXFE))
 {
     if(rxphase==0 )
     {
         RxdstAdd =UART1_DR_R ;
         busy=1;

         if(RxdstAdd== 0xFF|| RxdstAdd==myaddress)    // unicast or broad cast msg //UART_LCRH_PEN==0X02//UART_LCRH_PEN==0X02
         {  // RxdstAdd =UART1_DR_R &0xFF;
            rxphase++;
            RED_BLED=0;

         }
     }
     else if(rxphase==1)
      {
      RxsrcAdd = UART1_DR_R&0xFF;
      rxphase++;
      }
     else if(rxphase==2)
     {
         RxseqId=UART1_DR_R &0xFF;
         rxphase++;
     }
     else if(rxphase==3)
     {
         Rxcmd=UART1_DR_R &0xFF;
                  rxphase++;
     }
     else if(rxphase==4)
     {
         Rxchannel= UART1_DR_R &0xff;
         rxphase++;
     }
     else if(rxphase==5)
     {
         Rxsize=UART1_DR_R &0xff;
         rxphase++;
     }
     else if(rxphase==6)
     {
         for(w;w<Rxsize;w++)
                  {
                           Rxdata[w]=UART1_DR_R;

                         break;
                   }
                       if(w>=Rxsize)
                       {

                           rxphase++;
                           w=0;

                       }
                       else
                       {
                           w++;
                       }


     }
     else if (rxphase==7)
     { //Rxchecksum=0;
      Rxchecksum=UART1_DR_R ;

      calculate= ~(RxdstAdd+RxsrcAdd+Rxcmd+Rxchannel+Rxsize+RxseqId +Rxchecksum);
      if(calculate>=0)   // getting error in LBC beacuse of parity I got 1
      {
          //processRxdata(RxdstAdd,RxsrcAdd,Rxcmd,Rxchannel,Rxsize,Rxdata,RxseqId);
          processRxdata();
          rxphase=0;
          RED_BLED=1;
          Rx_time_out=150;

      }
      else
      {   RED_BLED=1;
          rxphase=0;
      }

     }

       UART1_ICR_R |= UART_ICR_RXIC;                                                                   
        // end process
        // clear the interupt
    //UART1_ICR_R |= UART_ICR_TXIC;

 }
 if(UART1_RIS_R & UART_RIS_TXRIS)
 {
     if(UART_FR_TXFE & UART1_FR_R)
     {
        sendRs485byte();
        UART1_ICR_R |= UART_ICR_TXIC;

     }

 }
}




// STEP 5 HERE

int g=0;    // for running data loop
int imp=0;

bool test_done;
int test_cs=2;
void sendRs485byte()
{

  if(msgInprogress==-1)   // NO MSG IN PROGRESS
   {

     for(imp;imp<=MAX_FIELDS;imp++)
      {
         if(Tx485Array[imp].sendable==1 && Tx485Array[imp].timeToTx ==0 )
         {
             msgPhase=0;
             msgInprogress=imp;    //
             imp++;

             break;
         }
      }
   }
   if (msgInprogress!=-1 && msgPhase<8)  /// GET NEXT BYTE OF MSG OF SEND
      {
     
       GPIO_PORTA_DEN_R |= DEN_MASK;
               DEN=1;// for chip pin 3 enable while sending TX data
          if(cs==1)
          {
            if(test_done==1)
            {
                test_done=0;
                if(busy==0)
                {
                    if(msgPhase==0)
                     {
                  UART1_LCRH_R |=UART_LCRH_PEN|UART_LCRH_SPS;
                  UART1_DR_R = Tx485Array[msgInprogress].dstAdd;
                  msgPhase++;
                  GREEN_BLED=0;

                      }

                }

            }
            else
            {
                busy=0;
                test_done=0;
                test_cs=2;

            }
          }

           if(msgPhase==0 && cs==0)
             {
               UART1_LCRH_R |=UART_LCRH_PEN|UART_LCRH_SPS;
               UART1_DR_R = Tx485Array[msgInprogress].dstAdd;
               msgPhase++;
               GREEN_BLED=0;

             }
           else if(msgPhase==1)
             {
               UART1_DR_R =Tx485Array[msgInprogress].srcAdd;;// Tx485Array[msgInprogress].srcAdd;   // source add??
                msgPhase++;

             }
           else if(msgPhase==2)
           {
               UART1_DR_R = Tx485Array[msgInprogress].seqId;
               msgPhase++;
           }
           else  if(msgPhase==3)
           {
               UART1_DR_R = Tx485Array[msgInprogress].cmd;
               msgPhase++;
           }
           else if(msgPhase==4)
           {
               UART1_DR_R = Tx485Array[msgInprogress].channel;
               msgPhase++;

           }
           else if(msgPhase==5)
           {
               UART1_DR_R = Tx485Array[msgInprogress].size;

               msgPhase++;
           }
           else if(msgPhase==6)
           {
               for(g;g<Tx485Array[msgInprogress].size;g++)               // it is  work also when data =0;
               {
                 UART1_DR_R = Tx485Array[msgInprogress].Txdata[g];
                 g++;
                 break;
               }
               if(g>=Tx485Array[msgInprogress].size)
               {
                   msgPhase++;
                   g=0;

               }





           }

           else if(msgPhase==7)
            {  UART1_DR_R =Tx485Array[msgInprogress].checksum;
               msgPhase++;

               GREEN_BLED=1;   // one blink for  transmission
               tx_time_out=150;

            }




        }
  else
  {

      if(Tx485Array[msgInprogress].count>=2) // it will allow 3 transmission
      {
         GREEN_BLED=1;  /// for error in transmission
          sprintf(string, "Msg not transmitted:     %4u\n",Tx485Array[msgInprogress].seqId );
          putsUart0(string);
          Tx485Array[msgInprogress].sendable=0;  // making invalid after sending 3 time
               // sendUImsg

      }
      if(ACK==0)
      {
          Tx485Array[msgInprogress].sendable=0;
      }
      if(ACK==1)
      {
          //Tx485Array[msgInprogress].count=1;
          Tx485Array[msgInprogress].timeToTx =1 ;  // It will  not send msg again till timer calls
          calretransmission();


      }

      if(imp>=11)
      {
          imp=0;
      }
      _delay_cycles(3);
//      GPIO_PORTB_DEN_R &= ~UART_TX_MASK;                                 // busy bit ,delay
      GPIO_PORTA_DEN_R &=~DEN_MASK;
      msgInprogress=-1;
      msgPhase=0;
  }





}
int y;
int delaytime;
bool random=0; // for on and off
void calretransmission()
{
    int z =Tx485Array[msgInprogress].count;
     y=Tx485Array[msgInprogress].seqId;

    if(random==0)
    {
         delaytime=300 + 2^(z)*100;    //


    }
    else
    {    uint8_t Random= getRandom();
       delaytime= 300 + Random* 2^(z)*100;
    }

}

int8_t getRandom()
{

          initAdc0Ss3();
       // Use AIN3 input with N=4 hardware sampling
           setAdc0Ss3Mux(3);
           setAdc0Ss3Log2AverageCount(2);
           uint16_t x[16];
           uint8_t i;
           // Clear FIR filter taps
           for (i = 0; i < 16; i++)
           { x[i] = 0;

           }

   int8_t raw=readAdc0Ss3();
   raw=raw & 0x07;                // it will give value between 0 to 7
   return raw;
//
}


void timer1start()
{

         TIMER1_CTL_R &= ~TIMER_CTL_TAEN;                 // turn-off timer before reconfiguring
        TIMER1_CFG_R = TIMER_CFG_32_BIT_TIMER;           // configure as 32-bit timer (A+B)
        TIMER1_TAMR_R = TIMER_TAMR_TAMR_PERIOD;          // configure for periodic mode (count down)
        TIMER1_TAILR_R = 400000;                         // set load value to 2e5 for 100 Hz interrupt rate
        TIMER1_CTL_R |= TIMER_CTL_TAEN;                  // turn-on timer
        NVIC_EN0_R |= 1 << (INT_TIMER1A-16);             // turn-on interrupt 37 (TIMER1A)
        TIMER1_IMR_R = TIMER_IMR_TATOIM;
}
void timer1Isr()
{
    if(tx_time_out>0)                 // for LED blink
    {
        tx_time_out--;
    }
    if(tx_time_out==0)
    {
        GREEN_BLED=0;
        tx_time_out=-1;
    }
    if(Rx_time_out>0)
    {
        Rx_time_out--;
    }
    if( Rx_time_out==0)
    {
        RED_BLED=0;
        Rx_time_out=-1;
    }
    if(test_cs>0)                       // for cs
    {
        test_cs--;
    }
    if(test_cs==0)
    {
        test_done=1;

    }
    // retransmission
    int k;   //
     if(y==Tx485Array[k].seqId && Tx485Array[k].sendable==1)  // for finding valid seq this one take max 100 ms to find nex valid cmd
     {
         if(delaytime>0)
             {
                 delaytime--;
             }
         if(delaytime==0)
         {
             if(UART_FR_TXFE & UART1_FR_R)
             {
                 imp=k;
                 Tx485Array[y].timeToTx=0;
                 sendRs485byte();

                 k=0;
             }

         }


     }
     else
     { k++;

     }

     if(k>=10)
     {
         k=0;
     }



TIMER1_ICR_R =TIMER_ICR_TATOCINT;
}



void processRxdata()
{
    if((Rxcmd & 0x80)==0x80)
                  {
                      sendRs485(RxsrcAdd,0x70,Rxchannel,1,RxseqId,0); //


                  }



      if((Rxcmd & 0x7F)==0x00)  //  chennal 1,2  //set
      {
         if(Rxchannel==1)
         {

             GREEN_BLED=Rxdata[0];
         }
          if(Rxchannel==2)
         {
              RED_BLED=Rxdata[0];
         }

      }
      if((Rxcmd&0x7f)==0x30) //get
      {uint8_t stat;
          if(Rxchannel==1)
                  {   if(GREEN_BLED>0)
                    {
                     stat=1;
                    }

                  }
          else if(Rxchannel==2)
                  {   if(RED_BLED>0)
                     {
                       stat=1;
                     }
                  }
          sendRs485(RxsrcAdd,0x31,Rxchannel,1,stat,ACK);
      }
      if((Rxcmd &0x7F)==0x31) // get recieve
      {
          sprintf(string, "status of channle given       %4u\n",Rxdata[0] );
           putsUart0(string);
         // sendUImsg(char* str[])
      }
      if((Rxcmd &0x7F)==0x78)   // poll req
      {
        sendRs485(RxsrcAdd,0x79,0,1,myaddress,0);
      }
      if((Rxcmd &0x7F)==0x79)   // poll reply
      {
          sprintf(string, " address of poll replier        %4u\n", Rxdata[0]);
          putsUart0(string);
          // sendUImsg(char* str[])
      }
      if((Rxcmd &0x7F)==0x7A)  //set add
      {
          while(EEPROM_EEDONE_R & EEPROM_EEDONE_WORKING);
                     EEPROM_EEOFFSET_R=0;
                     EEPROM_EERDWR_R = Rxdata[0];
                     eprom();

      }
      if((Rxcmd &0x7f)==0x7f)
      {
          NVIC_APINT_R=NVIC_APINT_VECTKEY |NVIC_APINT_SYSRESETREQ;
      }
      if((Rxcmd & 0x7F)==0x48)
      {
          int16_t r= Rxdata[0];
          int16_t g = Rxdata[1];
          int16_t b =Rxdata[2];
          initRgb();
          setRgbColor(r,g,b);

      }
      if((Rxcmd &0x7F)==0x70)
        {  int y;
            for(y=0;y<MAX_FIELDS;y++)
            {
                if(Tx485Array[y].seqId== Rxdata[0] && Tx485Array[y].dstAdd==RxsrcAdd) // SRC ADDRESS;
               {    sprintf(string, " Data received acknowledge  of seq        %4u\n",Tx485Array[y].seqId);
                       putsUart0(string);
                       putsUart0("\r>");
                       sprintf(string, " Data received  from Add         %4u\n",RxsrcAdd );
                        putsUart0(string);
                    Tx485Array[y].sendable =0;
                    break;
                }

            }

//

        }



}

void  eprom()
{
    SYSCTL_RCGCEEPROM_R=SYSCTL_RCGCEEPROM_R0;
    EEPROM_EEBLOCK_R=0;
    EEPROM_EEOFFSET_R=0;
    if(EEPROM_EERDWR_R == 0XFFFFFFFF)
    {
        myaddress=1;
    }
    else
    {
        myaddress= EEPROM_EERDWR_R;
    }


}




//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------

int main(void)
{
	// Initialize hardware
    USER_DATA data;
    initHw();
    initUart0();
    setUart0BaudRate(115200, 40e6);
    initUart1();
    eprom();

    timer1start();

    // golable array FOR INVALID

       int n;
       for(n=0;n<=MAX_FIELDS;n++)
       {
         Tx485Array[n].sendable= 0;
         Tx485Array[n].count=0;
       }


  while(true)    // TO RUN THINGS CONTINUE
  {
	// Display greeting
      putsUart0("\n\rproject of NEEL SHAH\n");
    putsUart0("\renter string \n");
    putsUart0("\r>");
    // display data
    getsUart0(&data);

      // display data here
    putsUart0("\n\r Output data::\n");
    putsUart0("\r");
    putsUart0(data.buffer);


    parseFields(&data);
    putsUart0("\n\r");

    // RESET COMMAND HERE
       bool valid =false;
       uint8_t flag=0;
         if (isCommand(&data, "reset", 0))
         { if(data.fieldCount <=1)
              { putsUart0("\n\r");
                  NVIC_APINT_R=NVIC_APINT_VECTKEY |NVIC_APINT_SYSRESETREQ;   // enable bit of NVIC M4F  reg
                  valid= true;
                  flag=1;
              }
         }




    uint8_t i;
    for (i = 0; i<data.fieldCount; i++)
    {
      putcUart0(data.fieldType[i]);

      //putcUart0(data.fieldPosition[i]);
      putsUart0("\n");
      putsUart0("\r");
      putsUart0(&data.buffer[data.fieldPosition[i]]);
      putsUart0("\n\r");

    }





    // set add, data â†’ add and data are integers
    if (isCommand(&data, "set", 2))
    {
        //putsUart0("\r command is set\n");
        int32_t add = getFieldInteger(&data, 1);
        int32_t dat = getFieldInteger(&data, 2);
        if ( add!=0  && dat!=0)
        {
            valid = true;
            flag=1;
//            putsUart0("\r command is set n,n\n");
        }
        else
        {

        }
    }
    else
    {
        // do something with this information
    }
    // alert ON|OFF â†’
   // alert ON or alert OFF are the expected commands
    if (isCommand(&data, "alert", 1))
    {

        char* sr = getFieldString(&data, 1);
        valid= true;
        flag =1;
        const char a[] ="on";
        const char b[] ="off";

                                  int CK=2;
                                  for(i=0;sr[i]!=0;i++)
                                   {
                                      if(a[i]==sr[i])
                                      {  CK=1;
                                         continue;

                                      }
                                      if( b[i]==sr[i])
                                      {   CK=0;
                                          continue;

                                      }
                                      else
                                      {

                                          valid=false;
                                          flag=0;
                                          CK=2;
                                          break;

                                      }
                                   }

                                  if(CK==1)
                                  {alert=1;}
                                  if(CK==0)
                                  {
                                      alert=0;
                                  }

    }

    //  for CS cmd on or off
    if (isCommand(&data, "cs", 1))
        {

            char* sr = getFieldString(&data, 1);
            valid= true;
            flag =1;
            valid= true;
            flag =1;
            const char a[] ="on";
            const char b[] ="off";

                           int CK=2;
                           for(i=0;sr[i]!=0;i++)
                            {
                               if(a[i]==sr[i])
                               {  CK=1;
                                  continue;

                               }
                               if( b[i]==sr[i])
                               {   CK=0;
                                   continue;

                               }
                               else
                               {

                                   valid=false;
                                   flag=0;
                                   CK=2;
                                   break;

                               }
                            }

                           if(CK==1)
                           {cs=1;}
                           if(CK==0)
                           {
                               cs=0;
                           }

        }
// for set a c,v
    if (isCommand(&data, "set", 3))
    {
        uint8_t address = getFieldInteger(&data, 1);
        uint8_t line = getFieldInteger(&data, 2);
        uint8_t value[8]={};
               value[0] = getFieldInteger(&data, 3);

        uint8_t cmd_1=  0;
        uint8_t size_1= 1;
        sendRs485(address,cmd_1,line,size_1,value,ACK);
        valid= true;
        flag=1;
    }

  // reset req to  A
    if (isCommand(&data, "reset", 1))
       {
           uint8_t address = getFieldInteger(&data, 1);

           sendRs485(address,0x7f,0,0,0,ACK);
           valid= true;
           flag=1;
       }


// For get A,C
    if (isCommand(&data, "get", 2))
        {
          uint8_t address = getFieldInteger(&data, 1);
          uint8_t line = getFieldInteger(&data, 2);
          sendRs485(address,0x30,line,0,0,ACK);
            valid= true;
            flag=1;
        }
// for poll
    if (isCommand(&data, "poll", 0))
           {
              sendRs485(0xFF,0x78,0,0,0,ACK);
               valid= true;
               flag=1;
           }

//   for new address
    if (isCommand(&data, "sa", 2))
           {
               int32_t address = getFieldInteger(&data, 1);
               int32_t newAdd = getFieldInteger(&data, 2);
               sendRs485(address,0x7A,0,0,newAdd,ACK);
               valid= true;
               flag=1;
           }
    if (isCommand(&data, "rgb", 4))
        {
            uint8_t address= getFieldInteger(&data, 1);
            uint8_t value[8]={};
                   value[0] = getFieldInteger(&data, 2);
                   value[1] = getFieldInteger(&data, 3);
                   value[2]= getFieldInteger(&data, 4);

            uint8_t cmd_1=  0;

            sendRs485(address,0x48,0,3,value,ACK);
            valid= true;
            flag=1;
        }


// RGB cmd
//    if (isCommand(&data, "rgb", 4))
//        {
//            int16_t r= getFieldInteger(&data, 1);
//            int16_t g = getFieldInteger(&data, 2);
//            int16_t b = getFieldInteger(&data, 3);
//            initRgb();
//            setRgbColor(r,g,b);
//
//            valid= true;
//            flag=1;
//        }

// ack on off for clear/ set gloable bit
    if(isCommand(&data, "ack", 1))
    {
        char* sr = getFieldString(&data, 1);
                    valid= true;
                    flag =1;
                    const char a[] ="on";
                            const char b[] ="off";

                                   int AK=2;
                                   for(i=0;sr[i]!=0;i++)
                                    {
                                       if(a[i]==sr[i])
                                       {  AK=1;
                                          continue;

                                       }
                                       if( b[i]==sr[i])
                                       {   AK=0;
                                           continue;

                                       }
                                       else
                                       {

                                           valid=false;
                                           flag=0;
                                           AK=2;
                                           break;

                                       }
                                    }

                                   if(AK==1)
                                   {ACK=1;}
                                   if(AK==0)
                                   {
                                       ACK=0;
                                   }

    }
// randon cmd
    if(isCommand(&data, "random", 1))
       {
           char* sr = getFieldString(&data, 1);
                       valid= true;
                       flag =1;
                       const char a[] ="on";
                       const char b[] ="off";

                                      int AK=2;
                                      for(i=0;sr[i]!=0;i++)
                                       {
                                          if(a[i]==sr[i])
                                          {  AK=1;
                                             continue;

                                          }
                                          if( b[i]==sr[i])
                                          {   AK=0;
                                              continue;

                                          }
                                          else
                                          {

                                              valid=false;
                                              flag=0;
                                              AK=2;
                                              break;

                                          }
                                       }

                                      if(AK==1)
                                      {random=1;}
                                      if(AK==0)
                                      {
                                          random=0;
                                      }

       }

    else if(flag==0)
    {
       valid=false;
    }
    // Process other commands here
//    // Look for error
    if (!valid)
        {
          putsUart0("Invalid command\n");

        }
  }




}
